#include <stdio.h>

int find_first_one_bit(int tmp)
{
  int index = 0;
  /*
  while (tmp && index < 8 * sizeof(int))
  {
    if (tmp & 0x1)
    {
      return index;
    }
    ++index;
    tmp >>= 1;
  }
  */
  for (; !(tmp & 0x1) && index < 8 * sizeof(int); tmp >>= 1, ++index) ;
  if (tmp & 0x1)
    return index;
  return -1;
}

int is_need_bit(int tmp, int index)
{
  int i;
  for (i = 0; i < index; ++i)
    tmp >>= 1;
  if (tmp & 0x1)
    return 0;
  return -1;
}

void two_once_num(int* num, unsigned int length, int* num1, int* num2)
{
  if (num == NULL)
    return ;
  
  int tmp = 0;
  int i;
  for (i = 0; i < length; ++i)
  {
    tmp ^= num[i];
  }
  
  int index = find_first_one_bit(tmp);
  
  for (i = 0; i < length; ++i)
  {
    // return value 0 is we need num, else isn't
    if (is_need_bit(num[i], index) == 0)
      *num1 ^= num[i];
    else
      *num2 ^= num[i];
  }
}

int main(void)
{
  int num[10] = {2, 3, 3, -4, 5, 5, -4, 7, 7, 6};
  int num1 = 0;
  int num2 = 0;
  two_once_num(num, sizeof(num)/sizeof(num[0]), &num1, &num2);
  printf("num1 : %d\n", num1);
  printf("num2 : %d\n", num2);
  return 0;
}
